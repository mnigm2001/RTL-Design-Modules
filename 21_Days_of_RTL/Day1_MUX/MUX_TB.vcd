$date
	Fri Dec 20 15:49:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module MUX_TB $end
$var wire 8 ! y_o [7:0] $end
$var parameter 32 " DATA_WIDTH $end
$var parameter 32 # SEL_WIDTH $end
$var reg 1 $ sel_i $end
$scope module UUT $end
$var wire 1 $ sel_i $end
$var parameter 32 % DATA_WIDTH $end
$var parameter 32 & SEL_WIDTH $end
$var reg 8 ' y_o [7:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ( i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 ) i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 * j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module MUX_TB $end
$var reg 8 + \data_i[0] [7:0] $end
$upscope $end
$scope module MUX_TB $end
$var reg 8 , \data_i[1] [7:0] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 &
b1000 %
b10 #
b1000 "
$end
#0
$dumpvars
b1000000 ,
b10010010 +
b10 *
b0 )
b10 (
b1000000 '
1$
b1000000 !
$end
#5
b10000110 !
b10000110 '
b10000110 ,
b110001 +
b10 *
b1 )
#10
b1001 !
b1001 '
b1001 ,
b110010 +
b10 *
b10 )
#15
b10111011 !
b10111011 '
b10111011 ,
b10000110 +
b10 *
b11 )
#20
b11000110 !
b11000110 '
b11000110 ,
b11110110 +
b10 *
b100 )
#25
b1100011 !
b1100011 '
0$
b1100010 ,
b1100011 +
b10 *
b101 )
#30
b11110010 !
b11110010 '
b111011 ,
b11110010 +
b10 *
b110 )
#35
b11000111 !
b11000111 '
b11111001 ,
b11000111 +
b10 *
b111 )
#40
b1110100 !
b1110100 '
b1100010 ,
b1110100 +
b10 *
b1000 )
#45
b10110 !
b10110 '
1$
b10110 ,
b1011110 +
b10 *
b1001 )
#50
b110001 !
b110001 '
0$
b10000101 ,
b110001 +
b10 *
b1010 )
#55
b11010101 !
b11010101 '
1$
b11010101 ,
b10010000 +
b10 *
b1011 )
#60
b1001 !
b1001 '
b1001 ,
b1001011 +
b10 *
b1100 )
#65
b10110101 !
b10110101 '
b10110101 ,
b101001 +
b10 *
b1101 )
#70
b1010111 !
b1010111 '
b1010111 ,
b1 +
b10 *
b1110 )
#75
b1100111 !
b1100111 '
0$
b10010001 ,
b1100111 +
b10 *
b1111 )
#80
b1100101 !
b1100101 '
b11110 ,
b1100101 +
b10 *
b10000 )
#85
b11000101 !
b11000101 '
b10100000 ,
b11000101 +
b10 *
b10001 )
#90
b1000100 !
b1000100 '
1$
b1000100 ,
b10111100 +
b10 *
b10010 )
#95
b11011011 !
b11011011 '
0$
b11100011 ,
b11011011 +
b10 *
b10011 )
#100
b10010101 !
b10010101 '
1$
b10010101 ,
b1011110 +
b10 *
b10100 )
#105
b11000010 !
b11000010 '
b11000010 ,
b111000 +
b10 *
b10101 )
#110
b11101 !
b11101 '
0$
b10011101 ,
b11101 +
b10 *
b10110 )
#115
b11111000 !
b11111000 '
1$
b11111000 ,
b10001010 +
b10 *
b10111 )
#120
b10100110 !
b10100110 '
b10100110 ,
b10110001 +
b10 *
b11000 )
#125
b11111100 !
b11111100 '
b11111100 ,
b11000111 +
b10 *
b11001 )
#130
b101110 !
b101110 '
b101110 ,
b1001111 +
b10 *
b11010 )
#135
b11000100 !
b11000100 '
0$
b100100 ,
b11000100 +
b10 *
b11011 )
#140
b1101011 !
b1101011 '
b101000 ,
b1101011 +
b10 *
b11100 )
#145
b10000110 !
b10000110 '
b1100001 ,
b10000110 +
b10 *
b11101 )
#150
b111011 !
b111011 '
b10011110 ,
b111011 +
b10 *
b11110 )
#155
b10110110 !
b10110110 '
1$
b10110110 ,
b111111 +
b10 *
b11111 )
#160
b1101001 !
b1101001 '
b1101001 ,
b10001111 +
b10 *
b100000 )
#165
b10101101 !
b10101101 '
b10101101 ,
b111100 +
b10 *
b100001 )
#170
b11111 !
b11111 '
0$
b10010101 ,
b11111 +
b10 *
b100010 )
#175
b1000011 !
b1000011 '
b1000111 ,
b1000011 +
b10 *
b100011 )
#180
b10011 !
b10011 '
1$
b10011 ,
b11111101 +
b10 *
b100100 )
#185
b10111 !
b10111 '
b10111 ,
b1010001 +
b10 *
b100101 )
#190
b10100010 !
b10100010 '
b10100010 ,
b101111 +
b10 *
b100110 )
#195
b1100101 !
b1100101 '
0$
b1110011 ,
b1100101 +
b10 *
b100111 )
#200
b101000 )
